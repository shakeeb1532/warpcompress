name: Crossbench

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  bench:
    name: Bench (${{ matrix.os }} / py${{ matrix.py }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        py: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}

      # ---- OS deps (snappy, lz4, zstd) ----
      - name: Linux apt deps
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libsnappy-dev libzstd-dev liblz4-dev

      - name: macOS brew deps
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install snappy zstd lz4 || true

      - name: Install package (+checksum extras)
        run: |
          python -m pip install -U pip wheel
          python -m pip install -U ".[hashes]"

      - name: Show versions
        run: |
          python -V
          python -c "import warpcompress as w; print('warpcompress', w.__version__)"
          python -c "import zstandard, lz4, snappy; print('zstd', zstandard.__version__); print('lz4', lz4.__version__); print('snappy', snappy.__version__)"

      - name: Create test data (20 MiB random)
        run: |
          python - <<'PY'
          import os
          with open('input-rand-20M.bin','wb') as f:
              f.write(os.urandom(20*1024*1024))
          PY

      - name: Compress (throughput + checksum + index)
        run: |
          warp-compress compress input-rand-20M.bin out.warp \
            --level throughput --workers 2 --checksum xxh64 --verify --index

      - name: Decompress (verify)
        run: |
          warp-compress decompress out.warp round.bin --workers 2 --verify

      - name: Verify round-trip (sha256)
        run: |
          python - <<'PY'
          import hashlib
          def h(p):
              m=hashlib.sha256()
              with open(p,'rb') as f:
                  for b in iter(lambda:f.read(1<<20), b''):
                      m.update(b)
              return m.hexdigest()
          a=h('input-rand-20M.bin'); b=h('round.bin')
          print('input',a); print('round',b)
          assert a==b, "hash mismatch"
          print('OK: hashes match')
          PY
